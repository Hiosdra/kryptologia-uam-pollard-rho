import java.math.BigInteger
import java.math.BigInteger.*
import java.security.SecureRandom

fun main() {
    val e =
        BigInteger("2219702669760051625529760071259189046161364151701596790770763259600544290997125107128138578832480323854037838605599695123440903054424577956799678397891626783444723950147784407335462559143107157658471735164714153971357443698994082727673072343180069044835094856719244582969485137575845153825021391095268519544748057926663150576101990156077844973202826679622719216615756960610764785110408304311098865781072786879379296360025429207038042833064515876868608188436266546466015175298619766069707237580766787423687287858279125035537409323009740621048068813783768774814593993312720811077575752373741693972477513")
    val d =
        BigInteger("9738454175598488918517912045396815318351885031131011603301149540233201870415928124228184903947308481461717153640402767289853198952704967449300122329014740408508653613839688094250923162490670540988214688775753190900423588412005697560323304500348114898045236656807283167901253083798426709790746938525240264995502098847606530252043043212677911465343705421183831116604350283789270965024124861992541018116786274867535581082248878546385006259988838129620903989258127062367035340066868353921340378027331177496332241490297041686454303452932424111634076797215417394272455217584601075851777273706083879476230809")
    val n =
        BigInteger("14205142842144491469901035779943007321473952670460614909740188710462796861921791780746014298824348546889748863603913825380912304112461129061114480661500416910991853573649055897001583708234998530660447745535711467407798340361335928981312718926721467943464464347521000503179497153112764130114342341251457556854374337702225661788558784747007799183865452550277915792606190524979919835785502848268656744723582283945123371679980696891117277548547543492116459573915049465031893477375432302554045103150951955486083526016584926750095118984741954481489582827589374811855794969993254570253121737541317841105374871")

    // 1
    val (s, t) = st(e, d)
//    println("s = $s; t = $t")

    // 2
    val a = generateRandom(n)
//    println("a = $a")

    // 3
    if(gcd(a, n) > ONE) {
        println("3: This is the way: $a")
        return
    }

    // 4
    var v = a.modPow(t, n)

    // 5
//    println("v = $v")
    if(v == ONE) {
        println("5: This is the way: ∅")
        return
    }

    // 6
    var v0: BigInteger
    do {
        v0 = v % n
        v = v.modPow(TWO, n)
    } while (v != ONE)

    // 7
    if(v0 % n == n - ONE) {
        println("7: This is the way: ∅")
        return
    }

    // 8
    println("8: This is the way: ${gcd(v0+ ONE, n)}")
    println("End")
}

/**
 * returns s,t
 */
private fun st(e: BigInteger, d: BigInteger): Pair<BigInteger, BigInteger> {
    val x = (e * d - ONE)
    val t = x / TWO // given s = 1
    return fixS(ONE, t)
}

/**
 * returns s,t
 * t is odd
 */
private tailrec fun fixS(s: BigInteger, t: BigInteger): Pair<BigInteger, BigInteger> =
    if (t % TWO == ZERO) {
        fixS(s + ONE, t / TWO)
    } else Pair(s, t)

/**
 * This function uses the SecureRandom class to generate a random BigInteger with the same number of bits as the maximum value n.
 * It then loops until it generates a BigInteger that is less than n, and returns that value.
 */
private fun generateRandom(upperLimit: BigInteger): BigInteger {
    val random = SecureRandom()
    var randomBigInt: BigInteger
    do {
        randomBigInt = BigInteger(upperLimit.bitLength(), random)
    } while (randomBigInt >= upperLimit)
    return randomBigInt
}

/**
 * Euclidean algorithm
 */
private fun gcd(a: BigInteger, b: BigInteger): BigInteger {
    if (b == ZERO) {
        return a
    }
    return gcd(b, a % b)
}
